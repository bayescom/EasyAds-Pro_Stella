user root;
worker_processes auto;
worker_cpu_affinity auto;

error_log logs/error.log error;

events {
    use epoll;
    worker_connections 10240;
}

http {
    gzip on;
    gzip_min_length 1024;
    gzip_buffers 8 16k;
    gzip_comp_level 4;
    gzip_types text/plain application/json application/x-www-form-urlencoded application/octet-stream charset=utf-8;
    gzip_vary on;

    lua_package_path "conf/?.lua;lua/?.lua;lua/*/?.lua;;";
    lua_package_cpath "lua/?.so;lualib/?.so;lualib/*/?.so;;";

    log_format stella_access   '$time_iso8601 $remote_addr "$request_body" '
                                '"$request" "$http_user_agent" $body_bytes_sent $status '
                                '$request_time $upstream_response_time';

    init_worker_by_lua_block {
        local uuid = require 'resty.jit-uuid'
        uuid.seed()

        -- 定时任务两分钟一次
        local delay = 120
        local conf_cache = require "tools.conf_cache"

        -- 初始化的时候先执行一次
        local ok, err = ngx.timer.at(0, conf_cache.conf_cache)
        if not ok then
            ngx.log(ngx.ERR, 'ngx.timer.at err:', err)
        end

        -- 后每两分钟一次
        local ok, err = ngx.timer.every(delay, conf_cache.conf_cache)
        if not ok then
            ngx.log(ngx.ERR, 'ngx.timer.every err:', err)
        end
    }

    more_clear_headers 'Server';
    more_clear_headers 'Date';

    server {
        listen 8059;

        if ($request_method ~ ^(HEAD)$ ) {
            return 200;
        }

        # 关闭access_log
        access_log off;
        access_log logs/access.log stella_access;

        location = /stella{
            content_by_lua_file lua/server/stella_server.lua;
            log_by_lua_file lua/log/logger.lua;
        }

        location = /track {
            # 根据需要添加是否使用自定义的DNS解析
            # 以下为示例配置，请根据需要换成实际的DNS服务器地址
            # resolver xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy ipv6=off;
            # resolver_timeout 500ms;
            content_by_lua_file lua/server/track_server.lua;
            log_by_lua_file lua/log/track_logger.lua;
        }

        location = /sdkevent {
            content_by_lua_file lua/server/sdkevent_server.lua;
            log_by_lua_file lua/log/event_logger.lua;
        }


        # Health Check
        location = /ping {
            content_by_lua_file lua/server/ping.lua;
        }

        # Ready
        location = /ready {
            content_by_lua_file lua/server/ready_server.lua;
        }
    }
}
